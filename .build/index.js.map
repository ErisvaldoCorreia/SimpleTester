{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["//Iniciando estudos sobre processos internos dos testes unit\u00E1rios.\n\nfunction somarValores(valueA: number, valueB: number) {\n  return valueA + valueB;\n}\n\nfunction subtrairValores(valueA: number, valueB: number) {\n  return valueA - valueB;\n}\n\n/* \nFun\u00E7\u00F5es que ser\u00E3o usadas para realizar o teste. VERS\u00C3O 1.0.4\nNesta modifica\u00E7\u00E3o iremos aplicar alguns detalhes para tornar os testes\nsimulados mais pr\u00F3ximos de um framework de testes reais.\n\nNesta fun\u00E7\u00E3o tester temos um processo de valida\u00E7\u00E3o simples onde ao executarmos a chamada\ndo tester, informamos 3 parametros: \n - o nome do teste que queremos realizar;\n - o valor ou fun\u00E7\u00E3o a ser testado;\n - o resultado que esperamos como comparativo;\n*/\nlet countSuccess = 0;\nlet countFails = 0;\n\nconst tester = (nameTeste: string ,valorBase: any, comparativo: any) => {\n  if(valorBase === comparativo) {\n    countSuccess++;\n    console.log(`\\u001b[42;1;37m PASS: \\u001b[0;32m ${nameTeste} -> funcionou!`);\n  } else {\n    countFails++;\n    console.log(`\\u001b[41;1;37m FAIL: \\u001b[0;31m ${nameTeste} -> falhou!`);\n  }\n}\n\nconst handleOutputTest = () => {\n  return console.log(`\\u001b[0;36m \n----------------------------------------------\n  Total:   ${countSuccess + countFails}\n  Sucesso: ${countSuccess}\n  Falhas:  ${countFails}\n  \\u001b[0mFim dos Testes.\\u001b[0;36m\n----------------------------------------------\n  `);\n}\n\n// Fun\u00E7\u00E3o para agrupar os testes por grupo.\nconst grupoTester = (nameTeste: string, funcoes: CallableFunction) => {\n  // usando o scape code u001b para modos stricts.\n  countFails = 0;\n  countSuccess = 0;\n  console.log(`\\u001b[0;36m ${nameTeste}\\n`);\n  funcoes();\n  handleOutputTest();\n}\n\n// Executando os testes isoladamente.\ntester('Soma de Valores correta', somarValores(2,2), 4);\ntester('Nova Soma de Valores correta', somarValores(5,2), 7);\ntester('Subtrair valores corretamente', subtrairValores(5,2), 3);\ntester('Este teste deve falhar', subtrairValores(5,2), 7);\ntester('Teste deve retornar como erro', somarValores(3,3), 7);\n\n// Executando os testes dentro do grupoTester.\ngrupoTester('Testes que devem passar', () => {\n  tester('Soma de Valores correta', somarValores(2,2), 4);\n  tester('Subtrair valores corretamente', subtrairValores(5,2), 3);\n});\n\ngrupoTester('Um teste passa e outro falha', () => {\n  tester('Soma de Valores correta', somarValores(2,2), 4);\n  tester('Teste deve retornar como erro', somarValores(3,3), 7);\n});\n\n/* \nAdicionando Cores ao Console.\nconsole.log(\"\\033[31mAqui esta o texto em vermelho.\")\nconsole.log(\"\\033[0;32mAqui esta o texto em verde.\")\nconsole.log(\"\\033[41;1;37m Fundo Vermelho \\033[0m --> Fundo Vermelho\")\nconsole.log(\"\\033[42;1;37m Fundo Verde \\033[0m --> Fundo Verde\")\n\nem arquivos que apresentem erro de legacy octal escape, podemos subistituir\no escape 033 por u001b, assim conseguindo rodar as cores no modo strict mode.\n*/\n"],
  "mappings": "AAEA,sBAAsB,QAAgB,QAAgB;AACpD,SAAO,SAAS;AAAA;AAGlB,yBAAyB,QAAgB,QAAgB;AACvD,SAAO,SAAS;AAAA;AAclB,IAAI,eAAe;AACnB,IAAI,aAAa;AAEjB,MAAM,SAAS,CAAC,WAAmB,WAAgB,gBAAqB;AACtE,MAAG,cAAc,aAAa;AAC5B;AACA,YAAQ,IAAI,4BAAsC;AAAA,SAC7C;AACL;AACA,YAAQ,IAAI,4BAAsC;AAAA;AAAA;AAItD,MAAM,mBAAmB,MAAM;AAC7B,SAAO,QAAQ,IAAI;AAAA;AAAA,aAER,eAAe;AAAA,aACf;AAAA,aACA;AAAA;AAAA;AAAA;AAAA;AAOb,MAAM,cAAc,CAAC,WAAmB,YAA8B;AAEpE,eAAa;AACb,iBAAe;AACf,UAAQ,IAAI,WAAgB;AAAA;AAC5B;AACA;AAAA;AAIF,OAAO,2BAA2B,aAAa,GAAE,IAAI;AACrD,OAAO,gCAAgC,aAAa,GAAE,IAAI;AAC1D,OAAO,iCAAiC,gBAAgB,GAAE,IAAI;AAC9D,OAAO,0BAA0B,gBAAgB,GAAE,IAAI;AACvD,OAAO,iCAAiC,aAAa,GAAE,IAAI;AAG3D,YAAY,2BAA2B,MAAM;AAC3C,SAAO,2BAA2B,aAAa,GAAE,IAAI;AACrD,SAAO,iCAAiC,gBAAgB,GAAE,IAAI;AAAA;AAGhE,YAAY,gCAAgC,MAAM;AAChD,SAAO,2BAA2B,aAAa,GAAE,IAAI;AACrD,SAAO,iCAAiC,aAAa,GAAE,IAAI;AAAA;",
  "names": []
}
